#!/bin/sh

#============================================================================#
#title          :EC2-BACKUP                                                  #
#description    :Backs up a local directory to an AWS EC2 cloud volume       #
#authors        :Gregory Basile; Sonal Mehta; Avineshwar Pratap Singh        #
#date           :20160410                                                    #
#version        :0.1.0                                                       #
#============================================================================#

###### printhelp function prints the help page ######
printhelp(){
	echo "
     ec2-backup accepts the following command-line flags:

     -h 	   Print a usage statement and exit.

     -m method	   Use the given method to perform the backup.	Valid methods
		   are 'dd' and 'rsync'; default is 'dd'.

     -v volume-id  Use the given volume instead of creating a new one.

     -d directory  Backup the given directory (default is current)
	"
	exit 0;
}

###### usage function prints the usage message ######
usage() {
	echo usage: `basename $0` '[-h] [-m method] [-v volume-id] directory'
	exit 1
}

###### checkvolume function checks if a user provided volume exists ######
checkvolume () {
	if [ -z "$volume_id" ]
	then
		echo "-v invoked with no parameter value"; usage; exit 1
	fi
	aws ec2 describe-volumes --volume-id $volume_id 1>/dev/null 2>/dev/null
    if [ $(echo $?) != 0 ]
    then
    	echo "$volume_id is not an existing volume"
    	exit 1
    fi
}

###### Parameter parse ######
while [ $# -gt 0 ] 
do
	case $1 in
		-h) printhelp;;
		-m) 
			case $2 in
			dd) method="$2"; shift; shift;;
			rsync) method="$2"; shift; shift;;
			-*) echo "-m invoked with no parameter value"; usage; exit 1;;
			*) 	echo "Bad argument -m method \n Valid options are dd or rsync.\n" usage; exit 1;;
			esac
			;;
		-v) 
			case $2 in
			-*) echo "-v invoked with no parameter value"; usage; exit 1;;
			*) volume_id="$2"; checkvolume; shift; shift;;
			esac
			;;
		-*) usage;;
		 *) 
		 	if [ $# -gt 1 ] 
		 	then
		 		echo "Directory must be the last line item."; usage
		 	else
		 		dir_to_backup=$1; shift
		 	fi
		 	;;
	esac
done

###### Check if directory to backup is a valid directory ######
if [ -z "$dir_to_backup" ]
then
	echo "No directory specified"
	usage
	exit 1
elif [ -d "$dir_to_backup" ] && [ $dir_to_backup != "/" ]
then
	echo "$dir_to_backup is not an existing directory"
	exit 1
fi	

###### Determine backup volume size if a volume was not specified. ######
if [ -z "$volume_id" ]
then
	backup_volume_size=`du -s $dir_to_backup 2>/dev/null | cut -f1`
	backup_volume_size=`echo $(($backup_volume_size * 2))`
	backup_volume_size=`echo $(($backup_volume_size / 1024))`
	backup_volume_size=`echo $(($backup_volume_size / 1024))`
	backup_volume_size=`echo $(($backup_volume_size + 2))`
fi

###### Print out parameter settings if verbose option set ######
if $EC2_BACKUP_VERBOSE
then
	echo "\nEC2-BACKUP has been invoked with the following options:"
	echo "Directory to backup = $dir_to_backup"

	if [ -z "$method" ]
	then
		echo "Method = dd (default)"
	else
		echo "Method = $method"
	fi

	if [ -z "$volume_id" ]
	then
		echo "Backup volume unspecified, one will be created."
		echo "Backup volume size = $backup_volume_size"
	else
		echo "Backup Volume = $volume_id" 
	fi
fi

###### Check value of the EC2_BACKUP_FLAGS_SSH environment variable. If the flag is not set create a keypair ######
if [ -z "$EC2_BACKUP_FLAGS_SSH" ]
then
	aws ec2 create-key-pair --key-name $USER-EC2-BACKUP-key --query 'KeyMaterial' --output text > $USER-EC2-BACKUP-key.pem 1>/dev/null 2>/dev/null && chmod 400 $USER-EC2-BACKUP-key.pem
	if [ $(echo $?) != 0 ]
	then
		rollback_key=0
		echo "Key is already existing. Edit the script for compatibility or remove that key from EC2, please."
		exit 1
	else
		rollback_key=1
		echo "key created"
		key_file=$USER-EC2-BACKUP-key; echo $?
	fi
else
	rollback_key=0
	# If the key flag was set, check if the identity_file flag is set
	flag=$(echo $EC2_BACKUP_FLAGS_SSH | tr -s ' ' | cut -d " " -f1) 
	key_file=$(echo $EC2_BACKUP_FLAGS_SSH | tr -s ' ' | cut -d " " -f2)
	if [ "$flag" != -i ]
	then
		echo "EC2_BACKUP_FLAGS_SSH must set the identity file flag. Any other flags are not supported."
		exit 1
	fi

	# Check if the keyfile is valid
	if [ -e "$key_file" ] 
	then
		echo "EC2_BACKUP_FLAGS_SSH environment variable set with an invalid or non-readable keyfile"
		exit 1
	fi

	# If verbose option is set dusplay flag info
	if $EC2_BACKUP_VERBOSE
	then
		echo "\nEC2_BACKUP_FLAGS_AWS: $EC2_BACKUP_FLAGS_AWS"
			 "EC2_BACKUP_FLAGS_SSH: $EC2_BACKUP_FLAGS_SSH"
		echo "Keyfile found at $key_file"
	fi
fi

###### Create security group ######
aws ec2 create-security-group --group-name $USER-EC2-BACKUP-group --description "EC2-BACKUP-tool" 1>/dev/null 2>/dev/null
if [ $? != "0" ]
then
	rollback_sg=0
	echo "Error creating the security group with name $USER-EC2-BACKUP-group."
	if [ $rollback_key == 1 ]
	then
		aws ec2 delete-key-pair --key-name $key &>/dev/null
		echo "$? is the return code for key deletion from EC2."
		rm -f $key.pem
		echo "$? is the return code for key deletion locally."
	fi
	exit 1
else
	rollback_sg=1
	aws ec2 authorize-security-group-ingress --group-name $USER-EC2-BACKUP-group --port 22 --protocol tcp --cidr 0.0.0.0/0 1>/dev/null 2>/dev/null
fi

# Verbose print sg info
if $EC2_BACKUP_VERBOSE
then
	echo "\nCreated security group"
	echo "Group name: $USER-EC2-BACKUP-group"	
	echo "	Port: 22"
	echo "	Protocol: TCP"
	echo "	CIDR IP range: 0.0.0.0/0"
fi

###### Create volume if not provided ######

###### Spin up instance ######

###### Backup directory Method = dd ######

###### Backup directory Method = rsync ######

###### Clean up and exit ######

aws ec2 delete-security-group --group-name $USER-EC2-BACKUP-group 1>/dev/null 2>/dev/null
aws ec2 delete-key-pair --key-name $key 1>/dev/null 2>/dev/null

exit 0