#!/bin/sh
# ec2-backup - backup a directory into Elastic Block Storage (EBS)
#
################## FUNCTIONS ###################
usage() {          # Print the usage on commandline error or when called with -h
	echo "usage: `basename $0` [-h] [-m method] [-v volume-id] directory"
	exit 1
}

verbose_chk() {   # Prints verbose messages when called with -v
	[[ "${VERBOSE_FLAG}" = "true"]] && echo $1
}

cmd_check() {    # Checks for availability of various commands
if [ -z "$(which "$1")" ]; then
	echo "$2"
	exit 1
else
	export $4="$(which "$1")"
fi
echo "$3"
}

aws_volume_check() {
	VOLUME_VALID=`echo "$1" | awk '{ if ( $0 ~ /^vol-.{8}/) print $1}'`
	if [ -z "${VOLUME_VALID}" ]; then
		echo "ERROR: Incorrect volume-id, volume-id format is 'vol-xxxxxxx'"
	else
		AWS_VOLUME=`aws ec2 describe-volumes --volume-ids "${VOLUME_VALID}" \
		--output text | awk '{ if ( $0 ~ /^VOLUMES/) {print $8}}'`
		if [ -z ${AWS_VOLUME} ]; then
			echo "ERROR: please check the volume exists"
			exit 1
		else
			verbose_chk "Found and using ${AWS_VOLUME}..."
		fi
	fi
}

# Exceptional prcheck for verbose mode via the environment variable
[[ -n "${EC2_BACKUP_VERBOSE}" && "${EC2_BACKUP_VERBOSE}" -eq "true"]] && \
VERBOSE_FLAG=true || VERBOSE_FLAG=false

verbose_chk "                      -=# Verbose enabled #=-"

################## VARIABLES ###################
DIRECTORY='' # directory is given by user
AWS_CLI='' # aws cli command
AWS_VOLUME='' # volume-id is empty to begin with
AWS_VOLUME_SIZE='' # the aws volume size where the directory will be backed up
AWS_INSTANCE_ID='' # Instance ID
AWS_FLAG='' # placeholder for EC2_BACKUP_FLAGS_AWS
SSH_FLAG='' # placeholder for EC2_BACKUP_FLAGS_SSH
TAR_CMD='' # tar command
RSYNC_CMD='' # dd command
DU_CMD='' # DU command
BC_CMD='' # good o'l Binary Calculator


#############DEFAULT VARIABLES #################
BACKUP_METHOD='dd' # method set to dd as default'
BACKUP_FILE='backup_`date + "%Y%m%d_%H%M%S".tar'  # Set backup file name

AWS_INSTANCE = # - ???



# Start the script here
while [ $# -gt 1 ]
do
case $1 in
	-h) usage;;
	-m) shift; BACKUP_METHOD="$1"; shift;;  # Get backup method if specified
	-v) shift; aws_volume_check "$1"; shift;;  # Get volume-id and verify format
	*) echo "Incorrect option $1"; usage ;;   # show error and usage
																							# for incorrect option
esac
done

verbose_chk "Checking directory to be backed up is valid..."
[[ -d $1 && -r $1 ]] && DIRECTORY="$1" || echo "ERROR: Directory $1 \
does not exist."; exit 1  # Get directory name
verbose_chk "${DIRECTORY} is a valid directory."
verbose_chk "Checking user prefered backup method..."
[[ "${BACKUP_METHOD}" != "dd" || "${BACKUP_METHOD}" != "rsync" ]] && \
echo "ERROR: Incorrect backup method"; usage
verbose_chk "${BACKUP_METHOD} has been chosen."

verbose_chk "Commandline: `basename $0` $@" # Check if this works
verbose_chk "Checks if the above works, and remove for final submission"

################## PRE-CHECKS ###################
verbose_chk "Running some pre-checks..."
cmd_check "aws" "ERROR: aws cli not present" "AWS Cli found installed..." \
"AWS_CLI"
cmd_check "tar" "ERROR: tar utility not present, is this unix" \
"tar utility found installed..." "TAR_CMD"
cmd_check "rsync" "ERROR: rsync utility not found" \
"rsync utility found installed..." "RSYNC_CMD"
cmd_check "bc" "ERROR: bc utility not found" \
"bc utility found installed..." "BC_CMD"
cmd_check "du" "ERROR: du utility not found" \
"du utility found installed..." "DU_CMD"

# Chek for additional flag EC2_BACKUP_FLAGS_AWS
[[ -n "${EC2_BACKUP_FLAGS_AWS}" ]] && AWS_FLAG="${EC2_BACKUP_FLAGS_AWS}"; \
verbose_chk "Env. variable 'EC2_BACKUP_FLAGS_AWS' set to ${AWS_FLAG}..." || \
verbose_chk "Env. variable 'EC2_BACKUP_FLAGS_AWS' not set..."

# Chek for additional flag EC2_BACKUP_FLAGS_SSH
[[ -n "${EC2_BACKUP_FLAGS_SSH}" ]] && SSH_FLAG="${EC2_BACKUP_FLAGS_SSH}"; \
verbose_chk "Env. variable 'EC2_BACKUP_FLAGS_SSH' set to ${SSH_FLAG}..." || \
verbose_chk "Env. variable 'EC2_BACKUP_FLAGS_SSH' not set..."

# Check size of directory to be backedup and save it for future use
AWS_VOLUME_SIZE=$(echo "scale=2;`${DU_CMD} -bs ${DU_CMD} | ${AWK_CMD} \
'{print $1}'`/1073741824" | ${BC_CMD})

#####################################################
There are many main parts which are remaining i have done a test on the backup like the DD and it worked fine, Will update the code again today.
Have the code in my head but have to test them in all ways possible keeping things simple.
$ tar cvzf - aws | ssh name@ip "dd of=/home/backup/backup.tar.gz"
aws/
aws/ec2-backup
aws/ec2-backup_1
aws/ec2-backup_full
...........
..........
aws/rkc.pem
aws/rootkey.csv
aws/test/
2986034+1 records in
2986034+1 records out
1528849884 bytes (1.5 GB) copied, 460.558 s, 3.3 MB/s
