#!/bin/sh

flag_verbose='true'
flag_ssh='ec2backupkey'
flag_instance_type='--instance-type t1.micro --security-groups admin --key-name ec2key1'
image_id='ami-0ccb7d64' # for Ubuntu 14.04
directory=~/testdirectory

################## CREATE THE BACKUP VOLUME ###################
backup_volume_size='1'
volume="$(aws ec2 create-volume --size $backup_volume_size --availability-zone us-east-1c | cut -f7)"

################## SETUP THE BACKUP INSTANCE ###################

# Determine kernel type of the local machine

# Create an instance with the same kernel type as the local machine
instance_id="$(aws ec2 run-instances $flag_instance_type --image-id $image_id --key-name $flag_ssh | grep INSTANCES | cut -f8)"


# Enter wait loop while instance is spooling
state=''
while [ "$state" != "running" ]  
do
	if [ $flag_verbose ]
	then
		echo "Booting instance '$instance_id' for backup"
	fi
	state="$(aws ec2 describe-instances --instance-id $instance_id | grep STATE | cut -f3)"
done

# Determine the instance address for logging in
domain="$(aws ec2 describe-instances --instance-id $instance_id | grep ASSOCIATION | cut -f3 | awk 'NR==1{print $1}')"
if [ $flag_verbose ]
then
	echo "Domain of backup instance '$instance_id' is '$domain'"
fi

# Determine devices already mounted. Used later to determine our attached device.
existing_device="$(ssh -i $flag_ssh -o StrictHostKeyChecking=no ubuntu@$domain | ls /dev | grep 'xvd')"

# Attach volume to instance
device_id='/dev/sdx'
aws ec2 attach-volume --instance-id $instance_id --volume-id $volume --device $device_id


# Enter wait loop while volume is attaching
state=''
while [ "$state" != "attached" ]  
do
	if [ $flag_verbose ]
	then
		echo "Attaching '$volume' to '$instance_id'"
	fi
	state="$(aws ec2 describe-volumes --volume-id $volume | grep ATTACHMENTS | cut -f6)"
done
# Determine device name
backup_device="$(ssh -i $flag_ssh -o StrictHostKeyChecking=no ubuntu@$domain | ls /dev | grep 'xvd' | grep -v $existing_device)"
if [ $flag_verbose ]
then
	echo "Backup volume is attached, kernel named it '$backup_device'"
fi
# Format and Mount
ssh -i $flag_ssh -o StrictHostKeyChecking=no ubuntu@$domain sudo mkfs.ext4 /dev/$backup_device
mountPoint='/mnt/backup' #directory to mount backup volume
ssh -i $flag_ssh -o StrictHostKeyChecking=no ubuntu@$domain sudo mkdir $mountPoint # Create Mount point
ssh -i $flag_ssh -o StrictHostKeyChecking=no ubuntu@$domain sudo mount /dev/$backup_device $mountPoint

if [ $flag_verbose ]
then
	echo "Filesystem created, mounted too '$mountPoint'"
fi

# Backup 
backup_timestamp="$(date +%d-%b-%H_%M)" 
backup_directory='backup_'$backup_timestamp''
tar -zcv $directory $backup_directory
dd if=$backup_directory | ssh $flag_ssh -o StrictHostKeyChecking=no ubuntu@$domain dd of=$mountPoint/$backup_directory
ssh -i $flag_ssh -o StrictHostKeyChecking=no ubuntu@$domain ls $mountPoint



################## BACKUP FILES ###################